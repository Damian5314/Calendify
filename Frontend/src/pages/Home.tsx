
export default function Home() {

  return (
    <div className="container px-5 my-5">
      <h1>Welcome to the Web development Starter kit!</h1>

      <p>
        This starter kit contains a basic setup that should help you get up to speed with developing
        your web application
      </p>

      <p>
        The code base of the starter kit contains the following;
        <ul>
          <li>Backend with .NET (C#)</li>
          <li>Frontend using React with Typescript</li>
          <li>Webpack with hot module reloading enabled</li>
          <li>A database using Sqlite, we might change this to Postgres later</li>
          <li>A sample database model for the two cases using Entity Framework core</li>
          <li>CSS stylesheet using Bootstrap</li>
        </ul>
      </p>

      <h2>Chosing a practical case</h2>
      <p>
        When you have decided as a group which practical case your going to work on during the course you can uncomment the desired database model in the <b>DatabaseContext.cs</b> and add a new migration.
      </p>

      <h2>Adding a new database migrations</h2>
      <p>
        Whenever you make a change to the <b>DatabaseContext</b> you will need to add a new migration.
        All the database changes are being managed from the <i>/Migrations/</i> folder, the content of this folder is automatically generated. Do not edit this file by hand.
        Entity Framework Core is used to map the C# classes to SQL tables.
      </p>
      <p>
        To add a new migration after a database change run the following command: <i>dotnet ef migrations add [[Migration name]]</i>
      </p>

      <p>
        Inside the migrations folder you can allready find a migration called <i>InitialCreate</i> containing the creation of the Admin entity.
        The <b>DatabaseContext.cs</b> file contains two pre-configured databases for the practicall cases. You can uncomment one of them and add a new migration
        to apply the model. Inside this file you will also find some data seeds that creates a couple of admin users with a password.

        After every migration you will also need to run <i>dotnet ef database update</i>, this will apply the changes to the database.
      </p>


    </div >
  );
}
